Seed set to 1234
WARNING:py.warnings:/workspace/conda/envs/mmg/lib/python3.10/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)

INFO:root:Loaded ViT-H-14 model config.
WARNING:py.warnings:/workspace/MMG_01/scripts/evaluation/funcs.py:90: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(ckpt, map_location="cpu")

AE working on z of shape (1, 4, 64, 64) = 16384 dimensions.
>>> model checkpoint loaded.
Fetching 19 files:   0%|          | 0/19 [00:00<?, ?it/s]Fetching 19 files: 100%|██████████| 19/19 [00:00<00:00, 172120.47it/s]
WARNING:py.warnings:/workspace/conda/envs/mmg/lib/python3.10/site-packages/torch/nn/utils/weight_norm.py:143: FutureWarning: `torch.nn.utils.weight_norm` is deprecated in favor of `torch.nn.utils.parametrizations.weight_norm`.
  WeightNorm.apply(module, name, dim)

WARNING:py.warnings:/workspace/MMG_01/mmg_inference/auffusion_pipe_functions.py:318: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict_g = torch.load(ckpt_path)

An error occurred while trying to fetch /workspace/huggingface_cache/hub/models--auffusion--auffusion-full/snapshots/db5169f1890d4e5d926ac4c5524da0cc3d4b9a5b: Error no file named diffusion_pytorch_model.safetensors found in directory /workspace/huggingface_cache/hub/models--auffusion--auffusion-full/snapshots/db5169f1890d4e5d926ac4c5524da0cc3d4b9a5b.
Defaulting to unsafe serialization. Pass `allow_pickle=False` to raise an error instead.
You are using a model of type clip_text_model to instantiate a model of type . This is not supported for all configurations of models and can yield errors.
WARNING:py.warnings:/workspace/MMG_01/mmg_inference/auffusion_pipe_functions.py:111: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  instance.load_state_dict(torch.load(ckpt_path))

An error occurred while trying to fetch /workspace/huggingface_cache/hub/models--auffusion--auffusion-full/snapshots/db5169f1890d4e5d926ac4c5524da0cc3d4b9a5b: Error no file named diffusion_pytorch_model.safetensors found in directory /workspace/huggingface_cache/hub/models--auffusion--auffusion-full/snapshots/db5169f1890d4e5d926ac4c5524da0cc3d4b9a5b.
Defaulting to unsafe serialization. Pass `allow_pickle=False` to raise an error instead.
The config attributes {'decay': 0.9999, 'inv_gamma': 1.0, 'min_decay': 0.0, 'optimization_step': 100000, 'power': 0.6666666666666666, 'update_after_step': 0, 'use_ema_warmup': False} were passed to UNet2DConditionModel, but are not expected and will be ignored. Please verify your config.json configuration file.
Removing weight norm...
INITIATED: ConditionAdapter: {'text_encoder_name': 'text_encoder_0', 'condition_adapter_name': 'condition_adapter_0', 'condition_type': 'clip-vit-large-patch14_text', 'pretrained_model_name_or_path': 'openai/clip-vit-large-patch14', 'condition_max_length': 77, 'condition_dim': 768, 'cross_attention_dim': 768}
LOADED: ConditionAdapter from /workspace/huggingface_cache/hub/models--auffusion--auffusion-full/snapshots/db5169f1890d4e5d926ac4c5524da0cc3d4b9a5b/condition_adapter_0
Generating:   0%|          | 0/73 [00:00<?, ?it/s]Generating:   1%|▏         | 1/73 [05:29<6:35:59, 330.00s/it]Generating:   3%|▎         | 2/73 [10:59<6:30:06, 329.67s/it]Generating:   4%|▍         | 3/73 [16:28<6:24:22, 329.46s/it]Generating:   5%|▌         | 4/73 [21:57<6:18:36, 329.23s/it]Generating:   7%|▋         | 5/73 [27:26<6:13:05, 329.20s/it]Generating:   8%|▊         | 6/73 [32:55<6:07:29, 329.09s/it]Generating:  10%|▉         | 7/73 [38:24<6:01:58, 329.07s/it]Generating:  11%|█         | 8/73 [43:53<5:56:28, 329.06s/it]Generating:  12%|█▏        | 9/73 [49:22<5:51:02, 329.10s/it]Generating:  14%|█▎        | 10/73 [54:52<5:45:39, 329.20s/it]Generating:  15%|█▌        | 11/73 [1:00:21<5:40:19, 329.35s/it]Generating:  16%|█▋        | 12/73 [1:05:51<5:34:57, 329.46s/it]Generating:  18%|█▊        | 13/73 [1:11:21<5:29:34, 329.57s/it]Generating:  19%|█▉        | 14/73 [1:16:51<5:24:06, 329.60s/it]Generating:  21%|██        | 15/73 [1:22:20<5:18:31, 329.50s/it]Generating:  22%|██▏       | 16/73 [1:27:49<5:13:02, 329.52s/it]Generating:  23%|██▎       | 17/73 [1:33:19<5:07:30, 329.48s/it]Generating:  25%|██▍       | 18/73 [1:38:48<5:01:57, 329.40s/it]Generating:  26%|██▌       | 19/73 [1:44:18<4:56:30, 329.45s/it]Generating:  27%|██▋       | 20/73 [1:49:47<4:51:00, 329.44s/it]Generating:  29%|██▉       | 21/73 [1:55:16<4:45:29, 329.41s/it]Generating:  30%|███       | 22/73 [2:00:46<4:40:00, 329.42s/it]Generating:  32%|███▏      | 23/73 [2:06:15<4:34:29, 329.39s/it]Generating:  33%|███▎      | 24/73 [2:11:45<4:29:01, 329.42s/it]Generating:  34%|███▍      | 25/73 [2:17:14<4:23:35, 329.50s/it]Generating:  36%|███▌      | 26/73 [2:22:44<4:18:07, 329.52s/it]Generating:  37%|███▋      | 27/73 [2:28:13<4:12:37, 329.50s/it]Generating:  38%|███▊      | 28/73 [2:33:43<4:07:06, 329.47s/it]Generating:  40%|███▉      | 29/73 [2:39:12<4:01:37, 329.50s/it]Generating:  41%|████      | 30/73 [2:44:42<3:56:05, 329.43s/it]Generating:  42%|████▏     | 31/73 [2:50:11<3:50:37, 329.45s/it]Generating:  44%|████▍     | 32/73 [2:55:40<3:45:05, 329.39s/it]Generating:  45%|████▌     | 33/73 [3:01:10<3:39:33, 329.35s/it]Generating:  47%|████▋     | 34/73 [3:06:39<3:34:02, 329.30s/it]Generating:  48%|████▊     | 35/73 [3:12:08<3:28:33, 329.31s/it]Generating:  49%|████▉     | 36/73 [3:17:37<3:23:01, 329.24s/it]Generating:  51%|█████     | 37/73 [3:23:07<3:17:33, 329.26s/it]Generating:  52%|█████▏    | 38/73 [3:28:36<3:12:02, 329.22s/it]Generating:  53%|█████▎    | 39/73 [3:34:05<3:06:34, 329.25s/it]Generating:  55%|█████▍    | 40/73 [3:39:34<3:01:05, 329.25s/it]Generating:  56%|█████▌    | 41/73 [3:45:03<2:55:35, 329.24s/it]Generating:  58%|█████▊    | 42/73 [3:50:33<2:50:06, 329.25s/it]Generating:  59%|█████▉    | 43/73 [3:56:02<2:44:39, 329.31s/it]Generating:  60%|██████    | 44/73 [4:01:31<2:39:10, 329.32s/it]Generating:  62%|██████▏   | 45/73 [4:07:01<2:33:40, 329.31s/it]Generating:  63%|██████▎   | 46/73 [4:12:30<2:28:12, 329.37s/it]Generating:  64%|██████▍   | 47/73 [4:18:00<2:22:45, 329.44s/it]Generating:  66%|██████▌   | 48/73 [4:23:30<2:17:17, 329.51s/it]Generating:  67%|██████▋   | 49/73 [4:28:59<2:11:50, 329.59s/it]Generating:  68%|██████▊   | 50/73 [4:34:29<2:06:18, 329.51s/it]Generating:  70%|██████▉   | 51/73 [4:39:58<2:00:47, 329.44s/it]Generating:  71%|███████   | 52/73 [4:45:27<1:55:17, 329.42s/it]Generating:  73%|███████▎  | 53/73 [4:50:57<1:49:48, 329.44s/it]Generating:  74%|███████▍  | 54/73 [4:56:26<1:44:18, 329.41s/it]Generating:  75%|███████▌  | 55/73 [5:01:55<1:38:45, 329.19s/it]Generating:  77%|███████▋  | 56/73 [5:07:24<1:33:14, 329.06s/it]Generating:  78%|███████▊  | 57/73 [5:12:53<1:27:44, 329.02s/it]Generating:  79%|███████▉  | 58/73 [5:18:21<1:22:14, 328.98s/it]Generating:  81%|████████  | 59/73 [5:23:50<1:16:45, 329.00s/it]Generating:  82%|████████▏ | 60/73 [5:29:20<1:11:17, 329.05s/it]Generating:  84%|████████▎ | 61/73 [5:34:49<1:05:49, 329.14s/it]Generating:  85%|████████▍ | 62/73 [5:40:18<1:00:20, 329.12s/it]Generating:  86%|████████▋ | 63/73 [5:45:47<54:51, 329.12s/it]  Generating:  88%|████████▊ | 64/73 [5:51:16<49:21, 329.04s/it]Generating:  89%|████████▉ | 65/73 [5:56:45<43:52, 329.02s/it]Generating:  90%|█████████ | 66/73 [6:02:14<38:23, 329.05s/it]Generating:  92%|█████████▏| 67/73 [6:07:43<32:54, 329.02s/it]Generating:  93%|█████████▎| 68/73 [6:13:12<27:25, 329.07s/it]Generating:  95%|█████████▍| 69/73 [6:18:41<21:56, 329.07s/it]Generating:  96%|█████████▌| 70/73 [6:24:10<16:27, 329.04s/it]Generating:  97%|█████████▋| 71/73 [6:29:39<10:57, 329.00s/it]Generating:  99%|█████████▊| 72/73 [6:35:08<05:28, 328.96s/it]Generating: 100%|██████████| 73/73 [6:40:37<00:00, 328.98s/it]Generating: 100%|██████████| 73/73 [6:40:37<00:00, 329.28s/it]
Process 0: Completed inference. Results saved in /workspace/dataset/0107_output_BASE_LoRA_epoch90_50steps.
