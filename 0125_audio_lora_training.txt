======================= Training Configuration =======================
CSV Path: /home/rtrt5060/MMG_TA_dataset_preprocessed_test_10k.csv
Audio Directory: /home/rtrt5060/preprocessed_spec
Output Directory: /home/rtrt5060/audio_teacher_LoRA_checkpoint
WandB Project: audio_teacher_lora_training_gcp0125
Train Batch Size: 32
Learning Rate: 1e-5
Number of Epochs: 16
Gradient Accumulation Steps: 16
Evaluate Every (epochs): 1
Mixed Precision: no
Pretrained Model: auffusion/auffusion-full
Number of Workers: 8
Save Checkpoint Every: 1 steps
Sample Rate: 16000
Slice Duration: 3.2 seconds
Hop Size: 160
Number of Mel Bands: 256
Random Seed: 42

======================= Evaluation Configuration =======================
Inference Batch Size: 32
Inference Save Path: /home/rtrt5060/audio_lora_inference_0125
ETA Audio: 0.0
Guidance Scale: 7.5
Number of Inference Steps: 25
Target Folder: /home/rtrt5060/audio_lora_processed_gt_3_2s_10k
==========================================================================
/opt/conda/envs/mmg/lib/python3.10/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)
/opt/conda/envs/mmg/lib/python3.10/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)
/opt/conda/envs/mmg/lib/python3.10/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)
/opt/conda/envs/mmg/lib/python3.10/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)
wandb: Currently logged in as: rtrt505. Use `wandb login --relogin` to force relogin
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Tracking run with wandb version 0.19.4
wandb: Run data is saved locally in /home/rtrt5060/MMG_01/wandb/run-20250125_164220-dn46g5h8
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run audio_lora_training
wandb: ‚≠êÔ∏è View project at https://wandb.ai/rtrt505/audio_teacher_lora_training_gcp0125
wandb: üöÄ View run at https://wandb.ai/rtrt505/audio_teacher_lora_training_gcp0125/runs/dn46g5h8
/home/rtrt5060/MMG_01/audio_lora_training/dataset_spec.py:58: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  _ = torch.load(spec_path)
/home/rtrt5060/MMG_01/audio_lora_training/dataset_spec.py:58: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  _ = torch.load(spec_path)
/home/rtrt5060/MMG_01/audio_lora_training/dataset_spec.py:58: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  _ = torch.load(spec_path)
/home/rtrt5060/MMG_01/audio_lora_training/dataset_spec.py:58: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  _ = torch.load(spec_path)
